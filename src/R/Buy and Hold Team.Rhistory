c = dataFrame$total_points
rows = nrow(dataFrame)
# get position counts
counts = dataFrame %>% count(position)
countGK = (counts$n)[3]
countDEF = (counts$n)[1]
countMID = (counts$n)[4]
countFWD = (counts$n)[2]
# aetup constraints
squad = rep(1, rows)
GK = c(rep(1, countGK), rep(0, rows - countGK))
DEF = c(rep(0, countGK), rep(1, countDEF), rep(0, countMID + countFWD))
MID = c(rep(0, countGK + countDEF), rep(1, countMID), rep(0, countFWD))
FWD = c(rep(0, rows - countFWD), rep(1, countFWD))
constraints = 8
# # constraints matrix
A = matrix( c(squad, GK, DEF, DEF, MID, MID, FWD, FWD), nrow = constraints, byrow = T)
# MILP setup
model = make.lp(nrow = constraints, ncol = rows)
lp.control(model, sense = "max")
set.type(model, 1:rows, type = c("binary"))
set.objfn(model, c)
# create a for loop to insert constraints
add.constraint(model, A[1, ], d[1], b[1])
add.constraint(model, A[2, ], d[2], b[2])
add.constraint(model, A[3, ], d[3], b[3])
add.constraint(model, A[4, ], d[4], b[4])
add.constraint(model, A[5, ], d[5], b[5])
add.constraint(model, A[6, ], d[6], b[6])
add.constraint(model, A[7, ], d[7], b[7])
add.constraint(model, A[8, ], d[8], b[8])
# The idea is to cut off the current integer solution by adding a constraint. Then re-solve.
# Stop when no longer optimal or when the objective starts to deteriorate.
solve(model)
sols = list()
cost = get.objective(model)
while (TRUE) {
sol = round(get.variables(model))
sols = c(sols, list(sol))
add.constraint(model, (2 * sol) - 1, "<=", sum(sol) - 1)
constant = solve(model)
if (constant != 0 | get.objective(model) < cost - 1e-6) {
break
}
}
return( list(model = model, data = dataFrame, solutions = sols) )
}
bestXI = function(model, dataFrame){
dreamTeam = dataFrame[which(model$solution == 1, T), ]
return(dreamTeam)
}
ties = function(solution, dataFrame){
squad = dataFrame[which(solution == 1, T), ]
stats = apply(squad[, 4:8], 2, sum)
return(stats)
}
# compute for all season data
for (i in 1:N) {
for (j in 1:n) {
object[[j]] = MILP(data0[[i]], j)
}
models[[i]] = object
object = c()
}
library(openxlsx)
library(dplyr)
library(lpSolveAPI)
seasons = c("2016-17", "2017-18", "2018-19", "2019-20", "2020-21", "2021-22")
# number of seasons
N = length(seasons)
# number of gameweeks
n = 38
# init objects
data0 = models = object = bestXI = gwXI = c()
# constraints
# squad, GK, DEF lower, DEF upper, MID lower, MID upper, FWD lower, FWD upper
d = c("=", "=", ">=", "<=", ">=", "<=", ">=", "<=")
b = c(11, 1, 3, 5, 2, 5, 1, 3)
# read data sets
for (i in 1:N) {
data0[[i]] = read.xlsx(xlsxFile = "Project Data.xlsx", sheet = i)
}
# important variables
index = c("name", "position", "team_name", "opp_team_name", "round", "GW",
"total_points", "was_home", "value", "goals_scored", "assists",
"goals_conceded", "clean_sheets", "saves", "minutes", "own_goals",
"penalties_missed", "penalties_saved", "yellow_cards", "red_cards",
"bonus", "bps", "influence", "creativity", "threat", "ict_index",
"selected")
# important variables
index = c("name", "position", "team_name", "opp_team_name", "round", "GW",
"total_points", "was_home", "value", "goals_scored", "assists",
"goals_conceded", "clean_sheets", "saves", "minutes", "own_goals",
"penalties_missed", "penalties_saved", "yellow_cards", "red_cards",
"bonus", "bps", "influence", "creativity", "threat", "ict_index",
"selected")
# function for team selection
MILP = function(dataSet, gw){
# extract gw data
# tie breakers after value
dataFrame = dataSet %>% filter(GW == gw) %>%
select(name, position, team_name, total_points, bps, goals_scored, goals_conceded, ict_index, value) %>%
mutate(value = value * 0.1) %>% group_by(position) %>%
arrange(match(position, c("GK", "DEF", "MID", "FWD")))
# coefficients and directions
c = dataFrame$total_points
rows = nrow(dataFrame)
# get position counts
counts = dataFrame %>% count(position)
countGK = (counts$n)[3]
countDEF = (counts$n)[1]
countMID = (counts$n)[4]
countFWD = (counts$n)[2]
# aetup constraints
squad = rep(1, rows)
GK = c(rep(1, countGK), rep(0, rows - countGK))
DEF = c(rep(0, countGK), rep(1, countDEF), rep(0, countMID + countFWD))
MID = c(rep(0, countGK + countDEF), rep(1, countMID), rep(0, countFWD))
FWD = c(rep(0, rows - countFWD), rep(1, countFWD))
constraints = 8
# # constraints matrix
A = matrix( c(squad, GK, DEF, DEF, MID, MID, FWD, FWD), nrow = constraints, byrow = T)
# MILP setup
model = make.lp(nrow = constraints, ncol = rows)
lp.control(model, sense = "max")
set.type(model, 1:rows, type = c("binary"))
set.objfn(model, c)
# create a for loop to insert constraints
add.constraint(model, A[1, ], d[1], b[1])
add.constraint(model, A[2, ], d[2], b[2])
add.constraint(model, A[3, ], d[3], b[3])
add.constraint(model, A[4, ], d[4], b[4])
add.constraint(model, A[5, ], d[5], b[5])
add.constraint(model, A[6, ], d[6], b[6])
add.constraint(model, A[7, ], d[7], b[7])
add.constraint(model, A[8, ], d[8], b[8])
# The idea is to cut off the current integer solution by adding a constraint. Then re-solve.
# Stop when no longer optimal or when the objective starts to deteriorate.
solve(model)
sols = list()
cost = get.objective(model)
while (TRUE) {
sol = round(get.variables(model))
sols = c(sols, list(sol))
add.constraint(model, (2 * sol) - 1, "<=", sum(sol) - 1)
constant = solve(model)
if (constant != 0 | get.objective(model) < cost - 1e-6) {
break
}
}
return( list(model = model, data = dataFrame, solutions = sols) )
}
bestXI = function(model, dataFrame){
dreamTeam = dataFrame[which(model$solution == 1, T), ]
return(dreamTeam)
}
ties = function(solution, dataFrame){
squad = dataFrame[which(solution == 1, T), ]
stats = apply(squad[, 4:8], 2, sum)
return(stats)
}
# compute for all season data
for (i in 1:N) {
for (j in 1:n) {
object[[j]] = MILP(data0[[i]], j)
}
models[[i]] = object
object = c()
}
names(models) = seasons
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
cat(i, j, "\n", sep = " ")
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = s[[D[1, "squad"]]]
}
bestXI[[k]] = gwXI
gwXI = c()
}
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = s[[D[1, "squad"]]]
}
bestXI[[j]] = gwXI
gwXI = c()
}
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[j]] = gwXI
gwXI = c()
}
names(models) = seasons
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
rm(bestXI)
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
bestXI  = c()
for (i in 1:N) {
results = models[[i]]
for(j in 1:38){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
View(bestXI)
for (i in 1:N) {
results = models[[i]]
for(j in 1:1){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
print(s[[D[1, "squad"]]])
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
for (i in 1:1) {
results = models[[i]]
for(j in 1:1){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
print(s[[D[1, "squad"]]])
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
for (i in 1:1) {
results = models[[i]]
for(j in 1:1){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
View(d)
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
for (i in 1:1) {
results = models[[i]]
for(j in 1:1){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
View(gwXI)
}
bestXI[[i]] = gwXI
gwXI = c()
}
for (i in 1:1) {
results = models[[i]]
for(j in 1:1){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[s[[D[1, "squad"]]], ]
View(d[s[[D[1, "squad"]]], ])
}
bestXI[[i]] = gwXI
gwXI = c()
}
for (i in 1:N) {
results = models[[i]]
for(j in 1:n){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[which(s[[D[1, "squad"]]] == 1, T), ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
View(bestXI)
save.image(file = "Kings of The Week.RData")
savehistory(file = "Kings of The Week.Rhistory")
load(file = "Kings of The Week.RData")
cumStats = readRDS("Summary_Stats.rds")
View(cumStats)
library(openxlsx)
library(dplyr)
library(lpSolveAPI)
seasons = c("2016-17", "2017-18", "2018-19", "2019-20", "2020-21", "2021-22")
# number of seasons
N = length(seasons)
# number of gameweeks
n = 38
# init objects
models = object = bestXI = gwXI = c()
# constraints
# squad, GK, DEF lower, DEF upper, MID lower, MID upper, FWD lower, FWD upper
d = c("=", "=", ">=", "<=", ">=", "<=", ">=", "<=")
b = c(11, 1, 3, 5, 2, 5, 1, 3)
# read data sets
data0 = readRDS("Project_Data.rds")
View(data0)
library(openxlsx)
library(dplyr)
library(lpSolveAPI)
seasons = c("2016-17", "2017-18", "2018-19", "2019-20", "2020-21", "2021-22")
# number of seasons
N = length(seasons)
# number of gameweeks
n = 38
# init objects
models = object = bestXI = gwXI = c()
# constraints
# squad, GK, DEF lower, DEF upper, MID lower, MID upper, FWD lower, FWD upper
d = c("=", "=", ">=", "<=", ">=", "<=", ">=", "<=")
b = c(11, 1, 3, 5, 2, 5, 1, 3)
# read data sets
data0 = readRDS("Project_Data.rds")
# important variables
index = c("name", "position", "team_name", "opp_team_name", "round", "GW",
"total_points", "was_home", "value", "goals_scored", "assists",
"goals_conceded", "clean_sheets", "saves", "minutes", "own_goals",
"penalties_missed", "penalties_saved", "yellow_cards", "red_cards",
"bonus", "bps", "influence", "creativity", "threat", "ict_index",
"selected")
save.image(file = "Buy and Hold Team.RData")
savehistory(file = "Buy and Hold Team.Rhistory")
cumStats = readRDS("Summary_Stats.rds")
View(cumStats)
names(cumStats) = seasons
library(openxlsx)
library(dplyr)
library(lpSolveAPI)
seasons = c("2016-17", "2017-18", "2018-19", "2019-20", "2020-21", "2021-22")
# number of seasons
N = length(seasons)
# number of gameweeks
n = 38
# init objects
models = object = bestXI = gwXI = c()
# constraints
# squad, GK, DEF lower, DEF upper, MID lower, MID upper, FWD lower, FWD upper
d = c("=", "=", ">=", "<=", ">=", "<=", ">=", "<=")
b = c(11, 1, 3, 5, 2, 5, 1, 3)
# read data sets
data0 = readRDS("Project_Data.rds")
# important variables
index = c("name", "position", "team_name", "opp_team_name", "round", "GW",
"total_points", "was_home", "value", "goals_scored", "assists",
"goals_conceded", "clean_sheets", "saves", "minutes", "own_goals",
"penalties_missed", "penalties_saved", "yellow_cards", "red_cards",
"bonus", "bps", "influence", "creativity", "threat", "ict_index",
"selected")
# function for team selection
MILP = function(dataSet, gw){
# extract gw data
# tie breakers after value
dataFrame = dataSet %>% filter(GW == gw) %>%
select(name, position, team_name, total_points, bps, goals_scored, goals_conceded, ict_index, value) %>%
mutate(value = value * 0.1) %>% group_by(position) %>%
arrange(match(position, c("GK", "DEF", "MID", "FWD")))
# coefficients and directions
c = dataFrame$total_points
rows = nrow(dataFrame)
# get position counts
counts = dataFrame %>% count(position)
countGK = (counts$n)[3]
countDEF = (counts$n)[1]
countMID = (counts$n)[4]
countFWD = (counts$n)[2]
# aetup constraints
squad = rep(1, rows)
GK = c(rep(1, countGK), rep(0, rows - countGK))
DEF = c(rep(0, countGK), rep(1, countDEF), rep(0, countMID + countFWD))
MID = c(rep(0, countGK + countDEF), rep(1, countMID), rep(0, countFWD))
FWD = c(rep(0, rows - countFWD), rep(1, countFWD))
constraints = 8
# # constraints matrix
A = matrix( c(squad, GK, DEF, DEF, MID, MID, FWD, FWD), nrow = constraints, byrow = T)
# MILP setup
model = make.lp(nrow = constraints, ncol = rows)
lp.control(model, sense = "max")
set.type(model, 1:rows, type = c("binary"))
set.objfn(model, c)
# create a for loop to insert constraints
add.constraint(model, A[1, ], d[1], b[1])
add.constraint(model, A[2, ], d[2], b[2])
add.constraint(model, A[3, ], d[3], b[3])
add.constraint(model, A[4, ], d[4], b[4])
add.constraint(model, A[5, ], d[5], b[5])
add.constraint(model, A[6, ], d[6], b[6])
add.constraint(model, A[7, ], d[7], b[7])
add.constraint(model, A[8, ], d[8], b[8])
# The idea is to cut off the current integer solution by adding a constraint. Then re-solve.
# Stop when no longer optimal or when the objective starts to deteriorate.
solve(model)
sols = list()
cost = get.objective(model)
while (TRUE) {
sol = round(get.variables(model))
sols = c(sols, list(sol))
add.constraint(model, (2 * sol) - 1, "<=", sum(sol) - 1)
constant = solve(model)
if (constant != 0 | get.objective(model) < cost - 1e-6) {
break
}
}
return( list(model = model, data = dataFrame, solutions = sols) )
}
ties = function(solution, dataFrame){
squad = dataFrame[which(solution == 1, T), ]
stats = apply(squad[, 4:8], 2, sum)
return(stats)
}
# compute for all season data
for (i in 1:N) {
for (j in 1:n) {
object[[j]] = MILP(data0[[i]], j)
}
models[[i]] = object
object = c()
}
names(models) = seasons
for (i in 1:N) {
results = models[[i]]
for(j in 1:n){
d = results[[j]]$data
s = results[[j]]$solutions
D = data.frame(t(as.matrix(sapply(s, ties, dataFrame = d))))
D$squad = 1:nrow(D)
D = arrange(.data = D, desc(bps), desc(goals_scored), goals_conceded, desc(ict_index))
gwXI[[j]] = d[which(s[[D[1, "squad"]]] == 1, T), ]
}
bestXI[[i]] = gwXI
gwXI = c()
}
save.image(file = "Kings of The Week.RData")
savehistory(file = "Kings of The Week.Rhistory")
load(file = "Kings of The Week.RData")
load(file = "Buy and Hold Team.RData")
cumStats = readRDS("Summary_Stats.rds")
names(cumStats) = seasons
View(cumStats)
unique(data0$`2016-17`$team_name)
data0$`2016-17`$team_name[1]
data0$`2016-17`$team_name[1] == unique(data0$`2016-17`$team_name)
(data0$`2016-17`$team_name[1] == unique(data0$`2016-17`$team_name)) + 3
View(apply(data0[[1]]$team_name, 1, FUN = function(x, y){return(x == unique(y))}, y = data0[[1]]$team_name))
?apply
?mapply
?sapply
View(sapply(data0[[1]]$team_name, FUN = function(x, y){return(x == unique(y))}, y = data0[[1]]$team_name))
View(t(sapply(data0[[1]]$team_name, FUN = function(x, y){return(x == unique(y))}, y = data0[[1]]$team_name)))
save.image(file = "Buy and Hold Team.RData")
savehistory(file = "Buy and Hold Team.Rhistory")

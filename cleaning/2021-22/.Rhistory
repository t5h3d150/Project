setwd("~/Statistics/UCT/STA4007W/Project/Fantasy-Premier-League/2019-20")
library(openxlsx)
library(dplyr)
options(encoding = "UTF-8")
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.csv("players_raw.csv")
data2 = read.xlsx("2018-19 merged.xlsx", sheet = 1)
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.csv("players_raw.csv")
data2 = read.xlsx("2019-20 merged.xlsx", sheet = 1)
splits = matrix(unlist(strsplit(data2[, 1], "_")), ncol = 3, byrow = T)
data2$name = paste(splits[, 1], splits[, 2], sep = "_")
data1 = read.csv("players_raw.csv")
data2 = read.xlsx("2019-20 merged.xlsx", sheet = 1)
View(data2)
View(data1)
library(openxlsx)
library(dplyr)
options(encoding = "UTF-8")
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.csv("players_raw.csv")
View(data1)
data2 = read.xlsx("2019-20 merged.xlsx", sheet = 1)
View(data2)
data0 = read.csv("merged_gw.csv")
View(data0)
write.xlsx(data0, "2019-20 merged.xlsx")
rm(data0)
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.csv("players_raw.csv")
data2 = read.xlsx("2019-20 merged.xlsx", sheet = 1)
splits = matrix(unlist(strsplit(data2[, 1], "_")), ncol = 3, byrow = T)
data2$name = paste(splits[, 1], splits[, 2], sep = "_")
data3 = read.csv("master_team_list.csv")
data3 = data3[data3$season == "2019-20", ]
data4 = data.frame(opponent_team = data3$team, opp_team_name = data3$team_name)
data1 = data1[, c("first_name", "second_name", "element_type", "team", "team_code")]
data1$name = paste(data1$first_name, data1$second_name, sep = "_")
data1$element_type[which(data1$element_type == 1)] = positions[1]
data1$element_type[which(data1$element_type == 2)] = positions[2]
data1$element_type[which(data1$element_type == 3)] = positions[3]
data1$element_type[which(data1$element_type == 4)] = positions[4]
data5 = merge(x = data1, y = data3, by = "team")
data5 = data5[, c("name", "element_type", "season", "team_name")]
data6 = merge(x = data2, y = data5, by = "name")
data7 = merge(x = data6, y = data4, by = "opponent_team")
data7 = data7 %>% select(season, name, element_type, GW, team_name, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team_name, opp_team_name, element)
data7$kickoff_time = as.Date(data7$kickoff_time)
data8 = read.xlsx("EPL 2019-20.xlsx", sheet = 1)
data8$Date = as.Date(convertToDate(data8$Date), format = "%Y-%b-%d")
data8 = data8[, c(2, 3, 5, 6)]
DGWH = DGWA = data.frame()
for (j in 1:nrow(data7)) {
tuple0 = data7[j, c(4:6, 58, 33)]
tuple1 = rep(NA, 3)
# sort according to GW, home = team, away = opp team((accurate))
if(tuple0$was_home == T){
tuple1 = tuple0[c(1:3, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Away.Team == as.character(tuple1[3]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index, "Home.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game, "Home.Team"]
DGWH = rbind(DGWH, data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
}
}
# sort according to GW, home = opp team(accurate), away = team
else{
tuple1 = tuple0[c(1, 3, 2, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Home.Team == as.character(tuple1[2]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index,  "Away.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game,  "Away.Team"]
DGWA = rbind(DGWA,  data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
break
}
}
}
View(data7)
View(data7)
for (j in 1:nrow(data7)) {
tuple0 = data7[j, c(4:6, 36, 21)]
tuple1 = rep(NA, 3)
# sort according to GW, home = team, away = opp team((accurate))
if(tuple0$was_home == T){
tuple1 = tuple0[c(1:3, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Away.Team == as.character(tuple1[3]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index, "Home.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game, "Home.Team"]
DGWH = rbind(DGWH, data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
}
}
# sort according to GW, home = opp team(accurate), away = team
else{
tuple1 = tuple0[c(1, 3, 2, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Home.Team == as.character(tuple1[2]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index,  "Away.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game,  "Away.Team"]
DGWA = rbind(DGWA,  data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
break
}
}
}
View(data7[13096, ])
data8 = read.xlsx("EPL 2019-20.xlsx", sheet = 1)
data8$Date = as.Date(convertToDate(data8$Date), format = "%Y-%b-%d")
data8 = data8[, c(2, 3, 5, 6)]
DGWH = DGWA = data.frame()
for (j in 1:nrow(data7)) {
tuple0 = data7[j, c(4:6, 36, 21)]
tuple1 = rep(NA, 3)
# sort according to GW, home = team, away = opp team((accurate))
if(tuple0$was_home == T){
tuple1 = tuple0[c(1:3, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Away.Team == as.character(tuple1[3]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index, "Home.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game, "Home.Team"]
DGWH = rbind(DGWH, data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
}
}
# sort according to GW, home = opp team(accurate), away = team
else{
tuple1 = tuple0[c(1, 3, 2, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Home.Team == as.character(tuple1[2]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index,  "Away.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game,  "Away.Team"]
DGWA = rbind(DGWA,  data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
break
}
}
}
View(data7[15870, ])
View(data7[15870, ])
data8 = read.xlsx("EPL 2019-20.xlsx", sheet = 1)
data8$Date = as.Date(convertToDate(data8$Date), format = "%Y-%b-%d")
data8 = data8[, c(2, 3, 5, 6)]
DGWH = DGWA = data.frame()
for (j in 1:nrow(data7)) {
tuple0 = data7[j, c(4:6, 36, 21)]
tuple1 = rep(NA, 3)
# sort according to GW, home = team, away = opp team((accurate))
if(tuple0$was_home == T){
tuple1 = tuple0[c(1:3, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Away.Team == as.character(tuple1[3]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index, "Home.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game, "Home.Team"]
DGWH = rbind(DGWH, data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
}
}
# sort according to GW, home = opp team(accurate), away = team
else{
tuple1 = tuple0[c(1, 3, 2, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Home.Team == as.character(tuple1[2]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index,  "Away.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game,  "Away.Team"]
DGWA = rbind(DGWA,  data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
break
}
}
}
View(data7[16557, ])
data7$GW = data7$round = ifelse(data7$GW > 29, data7$GW - 9, data7$GW)
unique(data7$GW)
data8 = read.xlsx("EPL 2019-20.xlsx", sheet = 1)
data8$Date = as.Date(convertToDate(data8$Date), format = "%Y-%b-%d")
data8 = data8[, c(2, 3, 5, 6)]
DGWH = DGWA = data.frame()
for (j in 1:nrow(data7)) {
tuple0 = data7[j, c(4:6, 36, 21)]
tuple1 = rep(NA, 3)
# sort according to GW, home = team, away = opp team((accurate))
if(tuple0$was_home == T){
tuple1 = tuple0[c(1:3, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Away.Team == as.character(tuple1[3]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index, "Home.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game, "Home.Team"]
DGWH = rbind(DGWH, data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
}
}
# sort according to GW, home = opp team(accurate), away = team
else{
tuple1 = tuple0[c(1, 3, 2, 5)]
index = which(data8$Round.Number == as.numeric(tuple1[1]) &
data8$Home.Team == as.character(tuple1[2]))
# SGW detection
if(length(index) == 1){
data7[j, "team_name"] = data8[index,  "Away.Team"]
}
# DGW detection
else if(length(index) > 1){
games = data8[index, ]
game = which(as.character(games$Date) == as.matrix(tuple1[4])[1, 1])
data7[j, "team_name"] = games[game,  "Away.Team"]
DGWA = rbind(DGWA,  data8[index, ])
}
# error detection
else if(length(index) == 0){
print(j)
print("Hold up")
break
}
}
}
data9 = data7 %>% select(season, name, element_type, GW, team_name, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team_name, opp_team_name, element)
# rename element type to position
write.xlsx(data9, "draft 2019-20.xlsx")
View(data2)
library(openxlsx)
library(dplyr)
options(encoding = "UTF-8")
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.xlsx("2020-21 merged.xlsx", sheet = 1)
setwd("~/Statistics/UCT/STA4007W/Project/Fantasy-Premier-League/2020-21")
data1 = read.xlsx("2020-21 merged.xlsx", sheet = 1)
View(data1)
# possible change of fixture number in fixture list
data0 = read.csv("merged_gw.csv")
View(data0)
write.xlsx(data0, "2020-21 merged.xlsx")
rm(data0)
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.xlsx("2020-21 merged.xlsx", sheet = 1)
View(data1)
data2 = read.csv("master_team_list.csv")
data2 = data2[data2$season == "2020-21", ]
View(data2)
data3 = data.frame(opponent_team = data2$team, opp_team_name = data2$team_name)
View(data1)
View(data3)
data4 = merge(x = data1, y = data3, by = "opponent_team")
View(data4)
View(data4)
View(data4)
data4$season = rep("2020-21", nrow(data4))
data4 = data4 %>% select(season, name, position, GW, team_name, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team_name, opp_team_name, element)
View(data4)
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team_name, opp_team_name, element)
View(data4)
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team, opp_team_name, position)
View(data4)
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team, opp_team_name, element)
View(data4)
data4 = merge(x = data1, y = data3, by = "opponent_team")
data4$season = rep("2020-21", nrow(data4))
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team, opp_team_name, element)
data4 = merge(x = data1, y = data3, by = "opponent_team")
data4$season = rep("2020-21", nrow(data4))
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team, opp_team_name, position)
View(data4)
View(data4)
# rename element type to position
write.xlsx(data9, "draft 2020-21.xlsx")
# rename element type to position
write.xlsx(data4, "draft 2020-21.xlsx")
# possible change of fixture number in fixture list
read.csv("merged_gw.csv")
library(openxlsx)
library(dplyr)
options(encoding = "UTF-8")
setwd("~/Statistics/UCT/STA4007W/Project/Fantasy-Premier-League/2021-22")
# possible change of fixture number in fixture list
read.csv("merged_gw.csv")
# possible change of fixture number in fixture list
data0 = read.csv("merged_gw.csv")
write.xlsx(data4, "2021-22 merged.xlsx")
write.xlsx(data0, "2021-22 merged.xlsx")
positions = c("GK", "DEF", "MID", "FWD")
data1 = read.xlsx("2021-22 merged.xlsx", sheet = 1)
data2 = read.csv("master_team_list.csv")
data2 = data2[data2$season == "2021-22", ]
data3 = data.frame(opponent_team = data2$team, opp_team_name = data2$team_name)
data4 = merge(x = data1, y = data3, by = "opponent_team")
data4$season = rep("2021-22", nrow(data4))
data4 = data4 %>% select(season, name, position, GW, team, opp_team_name, team_h_score, team_a_score, everything()) %>% arrange(GW, team, opp_team_name, position)
# rename element type to position
write.xlsx(data4, "draft 2021-22.xlsx")
